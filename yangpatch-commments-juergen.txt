----------------------------------------------------------------------



And here is my review of draft-ietf-netconf-yang-patch-03...

- I wonder whether the title can be improved; this document does not
  only define a media type, it actually defines a complete datastore
  patch method. Perhaps a more descriptive title can be found?

>>>> did not change title

- The introduction is kind of mis-leading since NETCONF has a method
  to patch a datastore (edit-config). This document is primarily
  written to support RESTCONF I assume. And then the first paragraph
  says "simpler edit request format" - simpler compared to what?

>>>> removed text about NETCONF.  YP is for RESTCONF only

- What is the reason for not defining a NETCONF RPC operation?

>>>> removed mention of NETCONF and possible RPC

- Should it no be 'datastore resource' instead 'datasource resource'
  in 1.1.4?

>>>> fixed


- Change "1.1.5. Terms" to "1.1.5. YANG Patch"? The whole section 1.1
  is about terminology.

>>>> fixed

- I did not know how to understand this sentence in section 2 until
  looking up the YANG module:

    The specific fields are defined with
    the 'application/yang.patch' extension definition in the YANG module
    Section 3.

  Perhaps less is more:

    The specific fields are defined in the YANG module in Section 3.

>>>> fixed

- Again, I find it somewhat strange that the document says how one has
  to define the NETCONF RPC operation (e.g., section 2.1) - why not
  simply define this instead of leaving this out?

>>>> removed as many mentions of NETCONF as possible

- In section 2.3, I again stumbled across " syntax specification is
  defined by the 'application/yang.patch-status' extension statement".
  The statement defining application/yang.patch-status is
  rc:restconf-media-type but the text makes it sound as if
  application/yang.patch-status would be a statement.

>>>> removed mention of extension statement

- Perhaps some text can be added to 2.2 and 2.3 to briefly outline
  what the various objects do. Some like:

    A YANG patch is optionally identified by a unique patch-id and it
    may have an optional comment.  A patch is an ordered collection of
    edits. Each edit is identified by an edit-id and it has an edit
    operation (create, delete, insert, merge, move, replace, remove)
    that is applied to ...

>>>> added paragraph to 2.2

  I think that in particular target, point, and where may need some
  explanation for a first time reader.

>>>> added sentence to 2.2 explaining insert

- Why is it useful to have absolute and relative target paths? Would
  it not be simpler if target path would always be absolute that the
  root would always be a datastore? Perhaps it makes sense to have
  both but it is not clear why.

>>>> added text explaining access to sub-resources

- Should the edit operations not be described using YANG terminology?
  This is supposed to be YANG patch and not RESTCONF patch.

>>>> not sure where the text is that needs to be changed

- Why is there an automatic commit to startup? Would this not be
  somewhat surprising from a NETCONF point of view? Can I use YANG
  patch to modify some other datastore, e.g., candidate with NETCONF?
  If so, why would this lead to a copy of running to startup? Perhaps
  this is not the intention but the text is not clear. I am also not
  clear why the text says "after the edits have been attempted" - why
  does the text not require that all edits have been successful?

>>>> changed "attempted" to "successfully completed".
>>>> There is no distinct :startup and no way to tell the client
     that separate commands to NV-save are needed

- If there would be an RPC binding for NETCONF, would I also be able
  to invoke this RPC via RESTCONF if the corresponding module is
  announce? I would assume so - perhaps this does not need
  clarification (just checking).

>>>> removed mention of NETCONF RPC operations.
>>>> Not sure what text this comment is about


- Why do we use RESTCONF specific types in the YANG module? Why not be
  protocol agnostic by using instance-identifier instead of
  target-resource-offset? I also do not know where "Data Resource
  Identifier" is defined and as such target-resource-offset is under
  specified (and "offset" may be misleading people, no?).

>>>> changed data-resource-offset to be an XPath absolute path
>>>> expression using the target resource as the document root


- What about the TBDs in sections 4.2 and 4.3?

>>>> not sure that to put for these parameters in the IANA request

- How can the error objects use RESTCONF specific definitions if we claim
  that this would also work with NETCONF?

>>>> what section is this comment about?
>>>> All RESTCONF-specific data types have been removed


- The description of yang-patch says on error the datastore MUST NOT
  be changed while previously the text said "SHOULD be returned to its
  original state".

>>>> changed to MUST (consistent with HTTP PATCH)

- I do not understand this:

            A patch MUST be validated by the server to be a
            well-formed message before any of the patch edits
            are validated or attempted.

>>>> removed this sentence

  Where is it detailed how an implementation has to validate a patch
  edit? While applying a sequence of edits, things may temporarily not
  validate. Does this matter? Why not simply require that the
  datastore must be valid if the complete patch succeeds and if
  validation fails after all edits have been applied, then this is
  reported? That is, validate the result obtained after applying all
  all edits but not all intermediate steps.

>>>> clarified that edits are validated before they are applied
>>>> to the running datastore

- Why is the comment restricted to 1024 characters? Seems like an
  arbitrary restriction.

>>>> removed length restriction

- The description of the operation enumeration is less RESTCONF
  specific but it still talks about data resources, which I think it
  should not. Same for target and other leafs.

>>>> no change; RESTCONF-specific is OK

- It is not entirely clear whether say a move moves the data node
  identified by point + where to the target or whether it moves the
  target to point + where.

- The usage of anyxml seems under-specified. It is non-interoperable
  using the JSON encoding document (which is not even referenced from
  this document - even though we have several examples with JSON
  encoding - but for this anyxml usage, we need some normative text
  that clearly says how anyxml is encoded). This actually seems to be
  a usage of anydata.

- What about putting the ok leaf into an explicit case? Might be
  easier to read.

- Why is edit-id numeric in some of JSON examples? The YANG model says
  it is a string. Lada would throw an error on this...

------------------------------------------------------------------

Juergen Schoenwaelder writes:
>- The introduction is kind of mis-leading since NETCONF has a method
>  to patch a datastore (edit-config). This document is primarily
>  written to support RESTCONF I assume. And then the first paragraph
>  says "simpler edit request format" - simpler compared to what?

This is my big issue with yang-patch: Why can't this be done using
edit-config?  What does yang-patch add that can't be performed with
edit-config?  Does restconf not expose an edit-config operation?
What's the value of inventing a second way of doing config edits?
How does a second way help us in advancing standardized network
management operations?  Are there sufficient benefits with yang-patch
to justify the expense, churn, duplication, and confusion it will
bring?

Thanks,
 Phil


-----------------------------------------------------------------------

 What is so great about the implementation-dependent <config> blob?
> Why are a set of attributes (1 in NETCONF, the rest defined in YANG)
> better than an edit list?

To be fair, I think Phil is right in that the expressiveness of both
formats are equal.  Which one you prefer is subjective, possibly
influenced by implementation choices.

The question boils down to if we think it is good to have two more or
less equal ways of doing things, or if there is value in having one
single mechanism.

> I have heard some comments that the patch approach is more direct
> and easier for the client to convey its intent.  A set of ordered edits
> provides more client control for setting up dependencies.

Even with YANG PATCH, it is the resulting datastore that is validated,
so the order of the edits doesn't matter.


/martin

----------------------------------------------------------------------

