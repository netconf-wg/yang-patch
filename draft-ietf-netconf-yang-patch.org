# -*- org -*-

This document describes a method for applying patches
to configuration datastores using data defined with the YANG
data modeling language.

* Introduction

There is a need for standard mechanisms to patch
datastores defined in ^RFC6241^,
which contain conceptual data that conforms to
schema specified with YANG ^RFC7950^.
An "ordered edit list"
approach is needed to provide RESTCONF client developers with
more precise RESTCONF client control of the edit procedure than
existing mechanisms found in ^I-D.ietf-netconf-restconf^.

This document defines a media type for a YANG-based editing
mechanism that can be used with the HTTP PATCH method ^RFC5789^.
YANG Patch is designed to support the RESTCONF protocol,
defined in ^I-D.ietf-netconf-restconf^.

It may be possible to use YANG Patch with other protocols
besides RESTCONF. This is outside the scope of this document.
It may be possible to use YANG Patch with datastore
types other than a configuration datastore.
This is outside the scope of this document.

** Terminology

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14, ^RFC2119^.

*** NETCONF

The following terms are defined in ^RFC6241^:

- configuration data
- datastore
- configuration datastore
- protocol operation
- running configuration datastore
- state data
- user

*** HTTP

The following terms are defined in ^RFC7230^:

- header field
- message-body
- query
- request URI

The following terms are defined in ^RFC7231^:

- method
- request
- resource

*** YANG

The following terms are defined in ^RFC7950^:

- container
- data node
- leaf
- leaf-list
- list
- RPC operation (now called protocol operation)

*** RESTCONF

The following terms are defined in ^I-D.ietf-netconf-restconf^:

- application/yang-data+xml
- application/yang-data+json
- data resource
- datastore resource
- patch
- RESTCONF capability
- target resource
- YANG data template

*** YANG Patch

The following terms are used within this document:

- RESTCONF client: a client which implements the RESTCONF protocol.

- RESTCONF server: a server which implements the RESTCONF protocol.

- YANG Patch: a conceptual edit request using the "yang-patch"
YANG Patch template, defined in ^module^.
In HTTP, refers to a PATCH method where a representation uses
either the media type "application/yang-patch+xml" or "application/yang-patch+json".

- YANG Patch Status: a conceptual edit status response using
the YANG "yang-patch-status" YANG data template, defined in ^module^.
In HTTP, refers to a response message for a PATCH method,
where it has a representation with either the media type
"application/yang-data+xml" or "application/yang-data+json".

- YANG Patch template: this is similar to a YANG data template, except
it has a representation with the media type "application/yang-patch+xml"
or "application/yang-patch+json".

*** Examples @examples@

Some protocol message lines within examples throughout the document
are split into multiple lines for display purposes only.
When a line ends with backslash ('\') as the last character,
the line is wrapped for display purposes.  It is to be
considered to be joined to the next line by deleting the
backslash, the following line break,
and the leading whitespace of the next line.

*** Tree Diagrams

A simplified graphical representation of the data model is used in
this document.  The meaning of the symbols in these
diagrams is as follows:

- Brackets "[" and "]" enclose list keys.
- Abbreviations before data node names: "rw" means configuration
data (read-write), "ro" state data (read-only), and "x"
operation resource (executable)
- Symbols after data node names: "?" means an optional node and "*"
denotes a "list" and "leaf-list".
- Parentheses enclose choice and case nodes, and case nodes are also
marked with a colon (":").
- Ellipsis ("...") stands for contents of subtrees that are not shown.

* YANG Patch @yang-patch@

A "YANG Patch" is an ordered list of edits that are applied
to the target datastore by the RESTCONF server. The specific fields
are defined in the YANG module in ^module^.

The YANG Patch operation is invoked
by the RESTCONF client by sending a PATCH method request with
a representation using either the "application/yang-patch+xml"
or "application/yang-patch+json" media type. A message-body representing the
YANG Patch input parameters MUST be provided.

YANG Patch has some features that are not possible with
the PATCH method in RESTCONF:

- YANG Patch allows multiple sub-resources to be edited at
within the same PATCH method.

- YANG Patch allows more precise edit operations than RESTCONF.
There are 7 operations supported
(create, delete, insert, merge, move, replace, remove).

- YANG Patch uses an edit list with an explicit processing order.
The edits are processed in client-specified order, and error
processing can be precise even when multiple errors occur
in the same patch request.

The YANG Patch "patch-id" may be useful for debugging,
and SHOULD be present in any audit audit logging records
generated by the RESTCONF server for a patch.

The RESTCONF server MUST return the Accept-Patch header field
in an OPTIONS response, as specified in ^RFC5789^,
which includes the media type for YANG Patch.

Note that YANG Patch can only edit data resources.
The PATCH method cannot be used to replace the datastore resource.
Although the "ietf-yang-patch" YANG module is written using
YANG version 1.1 ^RFC7950^, an implementation
of YANG Patch can be used with content defined in YANG version 1 ^RFC6020^
as well.


Example:

  Accept-Patch: application/yang-patch+xml,application/yang-patch+json

A YANG Patch can be encoded in XML format according
to ^W3C.REC-xml-20081126^. It can also be encoded in
JSON, according to "JSON Encoding of Data Modeled with YANG"
^RFC7951^.  If any meta-data needs to
be sent in a JSON message, it is encoded according
to "Defining and Using Metadata with YANG" ^RFC7952^.

** Target Resource

The YANG Patch operation uses the RESTCONF target resource URI
to identify the resource that will be patched.
This can be the datastore resource itself, i.e., "{+restconf}/data",
to edit top-level configuration data resources,
or it can be a configuration data resource within the
datastore resource, e.g., "{+restconf}/data/ietf-interfaces:interfaces",
to edit sub-resources within a top-level configuration
data resource.

The target resource MUST identify exactly one resource instance.
If more than one resource instance is identified, then
the request MUST NOT be processed, and
a "400 Bad Request" error response MUST be sent by the server.
If the target resource does not identify any existing
resource instance then
the request MUST NOT be processed, and
a "404 Not Found" error response MUST be sent by the server.

Each edit with a YANG Patch identifies a target data node
for the associated edit. This is described in ^target-data-node^.

** yang-patch Input

A YANG patch is optionally identified by a unique "patch-id" and it
may have an optional comment.  A patch is an ordered collection of
edits. Each edit is identified by an "edit-id" and it has an edit
operation (create, delete, insert, merge, move, replace, remove)
that is applied to the target resource.  Each edit can be applied
to a sub-resource "target" within the target resource.
If the operation is "insert" or "move", then the "where"
parameter indicates how the node is inserted or moved.
For values "before" and "after", the "point" parameter
specifies the data node insertion point.

A message-body representing the YANG Patch is sent
by the RESTCONF client to specify the edit operation request.
When used with the HTTP PATCH method, this data is identified
by the YANG Patch media type.

YANG tree diagram for "yang-patch" Container

  +---- yang-patch
        +---- patch-id?   string
        +---- comment?    string
        +---- edit* [edit-id]
           +---- edit-id?     string
           +---- operation    enumeration
           +---- target       target-resource-offset
           +---- point?       target-resource-offset
           +---- where?       enumeration
           +---- value?


** yang-patch-status Output

A message-body representing the YANG Patch Status is returned
to the RESTCONF client to report the detailed status of the edit operation.
When used with the HTTP PATCH method, this data is identified
by the YANG Patch Status media type, and the syntax specification
is defined in ^module^.

YANG tree diagram for "yang-patch-status" Container:

  +---- yang-patch-status
        +---- patch-id?      string
        +---- (global-status)?
        |  +--:(global-errors)
        |  |  +---- errors
        |  |     +---- error*
        |  |        +---- error-type       enumeration
        |  |        +---- error-tag        string
        |  |        +---- error-app-tag?   string
        |  |        +---- error-path?      instance-identifier
        |  |        +---- error-message?   string
        |  |        +---- error-info?
        |  +--:(ok)
        |     +---- ok?            empty
        +---- edit-status
           +---- edit* [edit-id]
              +---- edit-id?   string
              +---- (edit-status-choice)?
                 +--:(ok)
                 |  +---- ok?        empty
                 +--:(errors)
                    +---- errors
                       +---- error*
                          +---- error-type       enumeration
                          +---- error-tag        string
                          +---- error-app-tag?   string
                          +---- error-path?      instance-identifier
                          +---- error-message?   string
                          +---- error-info?

** Target Data Node @target-data-node@

The target data node for each edit operation is determined
by the value of the target resource in the request and the
"target" leaf within each "edit" entry.

If the target resource specified in the request URI identifies
a datastore resource, then the path string in the "target" leaf
is treated as an absolute path expression identifying the
target data node for the corresponding edit. The first node specified
in the "target" leaf is a top-level data node defined within
a YANG module. The "target" leaf MUST NOT contain a single
forward slash "/", since this would identify the datastore resource,
not a data resource.

If the target resource specified in the request URI identifies
a configuration data resource, then the path string in the "target" leaf
is treated as a relative path expression. The first node specified
in the "target" leaf is a child configuration data node of
the data node associated with the target resource.
If the "target" leaf contains a single
forward slash "/", then the target data node is
the target resource data node.

** Edit Operations

Each YANG patch edit specifies one edit operation on
the target data node. The set of operations is aligned
with the NETCONF edit operations, but also includes
some new operations.

!! table YANG Patch Edit Operations
!! head ! Operation   ! Description
!! row  ! create      ! create a new data resource if it does not already exist or error
!! row  ! delete      ! delete a data resource if it already exists or error
!! row  ! insert      ! insert a new user-ordered data resource
!! row  ! merge       ! merge the edit value with the target data resource; create if it does not already exist
!! row  ! move        ! re-order the target data resource
!! row  ! replace     ! replace the target data resource with the edit value
!! row  ! remove      ! remove a data resource if it already exists

** Successful Edit Response Handling

If a YANG Patch is completed without errors, the RESTCONF server SHOULD
return a "yang-patch-status" message.

The RESTCONF server will save the running datastore to non-volatile storage
if it supports non-volatile storage, and if the running datastore
contents have changed, as specified in ^I-D.ietf-netconf-restconf^.

Refer to ^success-example^ for a example of a successful
YANG Patch response.

** Error Handling

If a well-formed, schema-valid YANG Patch message is received, then
the RESTCONF server will process the supplied edits in ascending order.
The following error modes apply to the processing of this edit list:

If a YANG Patch is completed with errors, the RESTCONF server SHOULD
return a "yang-patch-status" message.

Refer to ^error-example^ for a example of an error
YANG Patch response.

** yang-patch RESTCONF Capability

A URI is defined to identify the YANG Patch extension to
the base RESTCONF protocol.  If the RESTCONF server supports the
YANG Patch media type, then the "yang-patch" RESTCONF capability
defined in ^capability-uri-def^ MUST be present in the
"capability" leaf-list in the
"ietf-restconf-monitoring" module defined in ^I-D.ietf-netconf-restconf^.

* YANG Module @module@

The "ietf-yang-patch" module defines conceptual definitions
with the 'yang-data' extension statements,
which are not meant to be implemented
as datastore contents by a RESTCONF server.

The "ietf-restconf" module from ^I-D.ietf-netconf-restconf^
is used by this module for the 'yang-data' extension definition.

RFC Ed.: update the date below with the date of RFC publication and
remove this note.

!! include-figure ietf-yang-patch.yang extract-to="ietf-yang-patch@2016-08-15.yang"

* IANA Considerations @iana@

** YANG Module Registry

This document registers one URI as a namespace in the IETF XML registry
^RFC3688^. Following the format in RFC 3688, the following
registration is requested to be made.

      URI: urn:ietf:params:xml:ns:yang:ietf-yang-patch
      Registrant Contact: The NETCONF WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

This document registers one YANG module in the YANG Module Names
registry ^RFC6020^.

      name:         ietf-yang-patch
      namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-patch
      prefix:       ypatch
      // RFC Ed.: replace XXXX with RFC number and remove this note
      reference:    RFC XXXX


** Media Types @media-types@


*** Media Type application/yang-patch+xml @yang-patch-xml@

   Type name: application

   Subtype name: yang-patch

   Required parameters: None

   Optional parameters: None

  // RFC Ed.: replace 'XXXX' with the real RFC number,
  // and remove this note

   Encoding considerations: 8-bit
      Each conceptual YANG data node is encoded according to the
      XML Encoding Rules and Canonical Format for the specific
      YANG data node type defined in [RFC7950].
      In addition, the "yang-patch" YANG Patch template found
      in [RFCXXXX] defines the structure of a YANG Patch request.

  // RFC Ed.: replace 'NN' in Section NN of [RFCXXXX] with the
  // section number for Security Considerations
  // Replace 'XXXX' in Section NN of [RFCXXXX] with the actual
  // RFC number, and remove this note.

   Security considerations: Security considerations related
      to the generation and consumption of RESTCONF messages
      are discussed in Section NN of [RFCXXXX].
      Additional security considerations are specific to the
      semantics of particular YANG data models. Each YANG module
      is expected to specify security considerations for the
      YANG data defined in that module.

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Interoperability considerations: [RFCXXXX] specifies the format
      of conforming messages and the interpretation thereof.

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Published specification: RFC XXXX

   Applications that use this media type: Instance document
     data parsers used within a protocol or automation tool
     that utilize the YANG Patch data structure.

   Fragment identifier considerations: Fragment identifiers
      for this type are not defined.

   Additional information:

     Deprecated alias names for this type: N/A
     Magic number(s): N/A
     File extension(s): .xml
     Macintosh file type code(s): "TEXT"

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Person & email address to contact for further information: See
      Authors' Addresses section of [RFCXXXX].

   Intended usage: COMMON

   Restrictions on usage: N/A

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Author: See Authors' Addresses section of [RFCXXXX].

   Change controller: Internet Engineering Task Force
      (mailto:iesg&ietf.org).

   Provisional registration? (standards tree only): no

*** Media Type application/yang-patch+json @yang-patch-json@

   Type name: application

   Subtype name: yang-patch+json

   Required parameters: None

   Optional parameters: None

  // RFC Ed.: replace draft-ietf-netmod-yang-json with
  // the actual RFC reference for JSON Encoding of YANG Data,
  //  and remove this note.

  // RFC Ed.: replace draft-ietf-netmod-yang-metadata with
  // the actual RFC reference for JSON Encoding of YANG Data,
  //  and remove this note.

  // RFC Ed.: replace 'XXXX' with the real RFC number,
  // and remove this note

   Encoding considerations: 8-bit
      Each conceptual YANG data node is encoded according to
      [draft-ietf-netmod-yang-json]. A data annotation is
      encoded according to [draft-ietf-netmod-yang-metadata]
      In addition, the "yang-patch" YANG Patch template found
      in [RFCXXXX] defines the structure of a YANG Patch request.

  // RFC Ed.: replace 'NN' in Section NN of [RFCXXXX] with the
  // section number for Security Considerations
  // Replace 'XXXX' in Section NN of [RFCXXXX] with the actual
  // RFC number, and remove this note.

   Security considerations: Security considerations related
      to the generation and consumption of RESTCONF messages
      are discussed in Section NN of [RFCXXXX].
      Additional security considerations are specific to the
      semantics of particular YANG data models. Each YANG module
      is expected to specify security considerations for the
      YANG data defined in that module.

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Interoperability considerations: [RFCXXXX] specifies the format
      of conforming messages and the interpretation thereof.

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Published specification: RFC XXXX

   Applications that use this media type: Instance document
     data parsers used within a protocol or automation tool
     that utilize the YANG Patch data structure.

   Fragment identifier considerations: The syntax and semantics
      of fragment identifiers are the same as specified for the
     "application/json" media type.

   Additional information:

     Deprecated alias names for this type: N/A
     Magic number(s): N/A
     File extension(s): .json
     Macintosh file type code(s): "TEXT"

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Person & email address to contact for further information: See
      Authors' Addresses section of [RFCXXXX].

   Intended usage: COMMON

   Restrictions on usage: N/A

  // RFC Ed.: replace XXXX with actual RFC number and remove this
  // note.

   Author: See Authors' Addresses section of [RFCXXXX].

   Change controller: Internet Engineering Task Force
      (mailto:iesg&ietf.org).

   Provisional registration? (standards tree only): no

** RESTCONF Capability URNs @capability-uri-def@

This document registers one capability identifier in
"RESTCONF Protocol Capability URNs" registry


  Index
     Capability Identifier
  ------------------------

  :yang-patch
      urn:ietf:params:restconf:capability:yang-patch:1.0


* Security Considerations

The YANG Patch media type does not introduce any significant
new security threats, beyond what is described in
^I-D.ietf-netconf-restconf^.
This document defines edit processing instructions for a
variant of the PATCH method, as used within the RESTCONF protocol.

It may be possible to use YANG Patch with other protocols
besides RESTCONF, which is outside the scope of this document.

It is important for RESTCONF server implementations to carefully
validate all the edit request parameters in some manner.
If the entire YANG Patch request cannot be completed,
then no configuration changes to the system are done.
A PATCH request MUST be applied atomically, as specified
in section 2 of ^RFC5789^.

A RESTCONF server implementation SHOULD attempt to prevent
system disruption due to partial processing of the
YANG Patch edit list.  It may be possible to construct
an attack on such a RESTCONF server, which relies on the
edit processing order mandated by YANG Patch.

A RESTCONF server implementation SHOULD attempt to prevent
system disruption due to excessive resource consumption
required to fulfill YANG Patch edit requests.
It may be possible to construct
an attack on such a RESTCONF server, which attempts to
consume all available memory or other resource types.


*! start-appendix

* Acknowledgements

The authors would like to thank the following people for
their contributions to this document: Rex Fernando.

Contributions to this material by Andy Bierman are based upon work
supported by the The Space & Terrestrial Communications Directorate
(S&TCD) under Contract No. W15P7T-13-C-A616. Any opinions, findings
and conclusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reflect the views of
The Space & Terrestrial Communications Directorate (S&TCD).

* Change Log

    -- RFC Ed.: remove this section before publication.  


The YANG Patch issue tracker can be found here:
https://github.com/netconf-wg/yang-patch/issues

** v11 to v12

- clarify target resource must exist
- fix errors in some examples
- change application/yang-patch-xml to application/yang-patch+xml

** v10 to v11

- change application/yang-patch to application/yang-patch-xml
- change server to RESTCONF server and remove NETCONF server term
- change client to RESTCONF client and remove NETCONF client term
- clarified that YANG 1.0 content can be used in a YANG Patch
implementation
- clarified more terminology
- fixed missing keys in edit examples
- added insert list example


** v09 to v10

- change yang-patch+xml to yang-patch
- clarify application/yang-patch+json media type
- add edit datastore example
- change data-resource-offset typedef so it is consistent for XML and JSON

** v08 to v09

- change RFC 7158 reference to RFC 7159 reference
- change RFC 2616 reference to RFC 7230 reference
- remove unused HTTP terms
- remove import-by-revision of ietf-restconf; not needed
- change application/yang.patch media type to application/yang-patch
- remove application/yang.patch-status media type; use application/yang-data
instead

** v07 to v08

- clarified target datastore and target data node terms
- clarified that target leaf can be single forward slash '/'
- added Successful edit response handling section
- clarified that YANG Patch draft is for RESTCONF protocol only
but may be defined for other protocols outside this document
- clarified that YANG Patch draft is for configuration datastores
only but may be defined for other datastore types outside this document
- fixed typos

** v06 to v07

- converted YANG module to YANG 1.1
- changed anyxml value to anydata value
- updated import revision date for ietf-restconf
- updated revision date for ietf-yang-patch because import-by-revision date
needed to be changed

** v05 to v06

- changed errors example so a full request and error
response is shown in XML format

- fixed error-path to match instance-identifier encoding
for both XML and JSON

- added references for YANG to JSON and YANG Metadata drafts

- clarified that YANG JSON drafts are used for encoding, not plain JSON


** v04 to v05

- updated reference to RESTCONF

** v03 to v04

- removed NETCONF specific text
- changed data-resource-offset typedef from a relative URI
to an XPath absolute path expression
- clarified insert operation
- removed requirement that edits MUST be applied in ascending order
- change SHOULD keep datastore unchanged on error
to MUST (this is required by HTTP PATCH)
- removed length restriction on 'comment' leaf
- updated YANG tree for example-jukebox library

** v02 to v03

- added usage of restconf-media-type extension to map
the yang-patch and yang-patch-status groupings
to media types
- added yang-patch RESTCONF capability URI
- Added sub-section for terms used from RESTCONF
- filled in security considerations section

** v01 to v02

- Reversed order of change log
- Clarified anyxml structure of "value" parameter within
a YANG patch request (github issue #1)
- Updated RESTCONF reference
- Added note to open issues section to check github instead

** v00 to v01

- Added text requiring support for Accept-Patch header field,
and removed 'Identification of YANG Patch capabilities' open
issue.

- Removed 'location' leaf from yang-patch-status grouping

- Removed open issue 'Protocol independence' because the
location leaf was removed.

- Removed open issue 'RESTCONF coupling' because there is no
concern about a normative reference to RESTCONF.
There may need to be a YANG 1.1 mechanism to allow protocol
template usage (instead of grouping wrapper).

- Removed open issue 'Is the delete operation needed'.
It was decided that both delete and remove should remain
as operations and clients can choose which one to use.
This is not an implementation burden on the server.

- Removed open issue 'global-errors needed'.
It was decided that they are needed as defined
because the global <ok/> is needed and the special
key value for edit=global error only allows for 1 global error.

- Removed open issue 'Is location leaf needed'.
It was decided that it is not needed so this leaf has been removed.

- Removed open issue 'Bulk editing support in yang-patch-status'.
The 'location' leaf has been removed so this issue is no longer
applicable.

- Removed open issue 'Edit list mechanism'.
Added text to the 'edit' list description-stmt
about how the individual edits must be processed.
There is no concern about duplicate edits which cause
intermediate results to be altered by subsequent edits
in the same edit list.

** bierman:yang-patch-00 to ietf:yang-patch-00

- Created open issues section


* Open Issues

    -- RFC Ed.: remove this section before publication.  

Refer to the github issue tracker for any open issues:

   https://github.com/netconf-wg/yang-patch/issues

* Example YANG Module

The example YANG module used in this document represents
a simple media jukebox interface. The "example-jukebox"
YANG module is defined in ^I-D.ietf-netconf-restconf^.

YANG tree diagram for "example-jukebox" Module:

   +--rw jukebox!
      +--rw library
      |  +--rw artist* [name]
      |  |  +--rw name     string
      |  |  +--rw album* [name]
      |  |     +--rw name     string
      |  |     +--rw genre?   identityref
      |  |     +--rw year?    uint16
      |  |     +--rw admin
      |  |     |  +--rw label?              string
      |  |     |  +--rw catalogue-number?   string
      |  |     +--rw song* [name]
      |  |        +--rw name        string
      |  |        +--rw location    string
      |  |        +--rw format?     string
      |  |        +--rw length?     uint32
      |  +--ro artist-count?   uint32
      |  +--ro album-count?    uint32
      |  +--ro song-count?     uint32
      +--rw playlist* [name]
      |  +--rw name           string
      |  +--rw description?   string
      |  +--rw song* [index]
      |     +--rw index    uint32
      |     +--rw id       leafref
      +--rw player
         +--rw gap?   decimal64

  rpcs:

   +---x play
      +--ro input
         +--ro playlist       string
         +--ro song-number    uint32


** YANG Patch Examples

This section includes RESTCONF examples.
Most examples are shown in JSON encoding ^RFC7159^, and some
are shown in XML encoding ^W3C.REC-xml-20081126^.

*** Add Resources: Error @error-example@

The following example shows several songs being added to
an existing album. Each edit contains one song.
The first song already exists, so an error will be
reported for that edit. The rest of the edits were not attempted,
since the first edit failed.  The XML encoding is used in this example.

Request from the RESTCONF client:

   PATCH /restconf/data/example-jukebox:jukebox/\
      library/artist=Foo%20Fighters/album=Wasting%20Light HTTP/1.1
   Host: example.com
   Accept: application/yang-data+xml
   Content-Type: application/yang-patch+xml

   <yang-patch xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-patch">
     <patch-id>add-songs-patch</patch-id>
     <edit>
       <edit-id>edit1</edit-id>
       <operation>create</operation>
       <target>/song=Bridge%20Burning</target>
       <value>
         <song xmlns="http://example.com/ns/example-jukebox">
           <name>Bridge Burning</name>
           <location>/media/bridge_burning.mp3</location>
           <format>MP3</format>
           <length>288</length>
         </song>
       </value>
     </edit>
     <edit>
       <edit-id>edit2</edit-id>
       <operation>create</operation>
       <target>/song=Rope</target>
       <value>
         <song xmlns="http://example.com/ns/example-jukebox">
           <name>Rope</name>
           <location>/media/rope.mp3</location>
           <format>MP3</format>
           <length>259</length>
         </song>
       </value>
     </edit>
     <edit>
       <edit-id>edit3</edit-id>
       <operation>create</operation>
       <target>/song=Dear%20Rosemary</target>
       <value>
         <song xmlns="http://example.com/ns/example-jukebox">
           <name>Dear Rosemary</name>
           <location>/media/dear_rosemary.mp3</location>
           <format>MP3</format>
           <length>269</length>
         </song>
       </value>
     </edit>
   </yang-patch>

XML Response from the RESTCONF server:

   HTTP/1.1 409 Conflict
   Date: Mon, 23 Apr 2012 13:01:20 GMT
   Server: example-server
   Last-Modified: Mon, 23 Apr 2012 13:01:20 GMT
   Content-Type: application/yang-data+xml

   <yang-patch-status
      xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-patch">
     <patch-id>add-songs-patch</patch-id>
     <edit-status>
       <edit>
          <edit-id>edit1</edit-id>
          <errors>
             <error>
                <error-type>application</error-type>
                <error-tag>data-exists</error-tag>
                <error-path
                  xmlns:jb="http://example.com/ns/example-jukebox">
                  /jb:jukebox/jb:library
                  /jb:artist[jb:name='Foo Fighters']
                  /jb:album[jb:name='Wasting Light']
                  /jb:song[jb:name='Burning Light']
                </error-path>
                <error-message>
                  Data already exists, cannot be created
                </error-message>
             </error>
          </errors>
       </edit>
    </edit-status>
  </yang-patch-status>


JSON Response from the RESTCONF server:

The following response is shown in JSON format to highlight the
difference in the "error-path" object encoding. For JSON, the
instance-identifier encoding in the "JSON Encoding of YANG
Data" draft is used.

   HTTP/1.1 409 Conflict
   Date: Mon, 23 Apr 2012 13:01:20 GMT
   Server: example-server
   Last-Modified: Mon, 23 Apr 2012 13:01:20 GMT
   Content-Type: application/yang-data+json

   {
     "ietf-yang-patch:yang-patch-status" : {
       "patch-id" : "add-songs-patch",
       "edit-status" : {
         "edit" : [
           {
             "edit-id" : "edit1",
             "errors" : {
               "error" : [
                 {
                   "error-type": "application",
                   "error-tag": "data-exists",
                   "error-path": "/example-jukebox:jukebox/library\
                      /artist[name='Foo Fighters']\
                      /album[name='Wasting Light']\
                      /song[name='Burning Light']",
                   "error-message":
                     "Data already exists, cannot be created"
                 }
               ]
             }
           }
         ]
       }
     }
   }


*** Add Resources: Success @success-example@

The following example shows several songs being added to
an existing album.

- Each of 2 edits contains one song.
- Both edits succeed and new sub-resources are created

Request from the RESTCONF client:

   PATCH /restconf/data/example-jukebox:jukebox/\
      library/artist=Foo%20Fighters/album=Wasting%20Light \
      HTTP/1.1
   Host: example.com
   Accept: application/yang-data+json
   Content-Type: application/yang-patch+json

   {
     "ietf-yang-patch:yang-patch" : {
       "patch-id" : "add-songs-patch-2",
       "edit" : [
         {
           "edit-id" : "edit1",
           "operation" : "create",
           "target" : "/song=Rope",
           "value" : {
             "song" : {
               "name" : "Rope",
               "location" : "/media/rope.mp3",
               "format" : "MP3",
               "length" : 259
             }
           }
         },
         {
           "edit-id" : "edit2",
           "operation" : "create",
           "target" : "/song=Dear%20Rosemary",
           "value" : {
             "song" : {
               "name" : "Dear Rosemary",
               "location" : "/media/dear_rosemary.mp3",
               "format" : "MP3",
               "length" : 269
             }
           }
         }
       ]
     }
   }

Response from the RESTCONF server:

   HTTP/1.1 200 OK
   Date: Mon, 23 Apr 2012 13:01:20 GMT
   Server: example-server
   Last-Modified: Mon, 23 Apr 2012 13:01:20 GMT
   Content-Type: application/yang-data+json

   {
     "ietf-yang-patch:yang-patch-status" : {
       "patch-id" : "add-songs-patch-2",
       "ok" : [null]
     }
   }


*** Insert list entry example

The following example shows a song being inserted within
an existing playlist. Song "6" in playlist "Foo-One" is
being inserted after song "5" in the playlist.
The operation succeeds, so a non-error reply example can be shown.

 Request from the RESTCONF client:

   PATCH /restconf/data/example-jukebox:jukebox/\
     playlist=Foo-One HTTP/1.1
   Host: example.com
   Accept: application/yang-data+json
   Content-Type: application/yang-patch+json

   {
     "ietf-yang-patch:yang-patch" : {
       "patch-id" : "move-song-patch",
       "comment" : "Insert song 6 after song 5",
       "edit" : [
         {
           "edit-id" : "edit1",
           "operation" : "insert",
           "target" : "/song=6",
           "point" : "/song=5",
           "where" : "after",
           "value" : {
             "example-jukebox:song" : {
               "name" : "Dear Prudence",
               "location" : "/media/dear_prudence.mp3",
               "format" : "MP3",
               "length" : 236
             }
           }
         }
       ]
     }
   }

 Response from the RESTCONF server:

   HTTP/1.1 200 OK
   Date: Mon, 23 Apr 2012 13:01:20 GMT
   Server: example-server
   Last-Modified: Mon, 23 Apr 2012 13:01:20 GMT
   Content-Type: application/yang-data+json

   {
     "ietf-yang-patch:yang-patch-status" : {
       "patch-id" : "move-song-patch",
       "ok" : [null]
     }
   }



*** Move list entry example

The following example shows a song being moved within
an existing playlist. Song "1" in playlist "Foo-One" is
being moved after song "3" in the playlist.
Note that no "value" parameter is needed for a "move" operation.
The operation succeeds, so a non-error reply example can be shown.

Request from the RESTCONF client:

   PATCH /restconf/data/example-jukebox:jukebox/\
     playlist=Foo-One HTTP/1.1
   Host: example.com
   Accept: application/yang-data+json
   Content-Type: application/yang-patch+json

   {
     "ietf-yang-patch:yang-patch" : {
       "patch-id" : "move-song-patch",
       "comment" : "Move song 1 after song 3",
       "edit" : [
         {
           "edit-id" : "edit1",
           "operation" : "move",
           "target" : "/song=1",
           "point" : "/song=3",
           "where" : "after"
         }
       ]
     }
   }

Response from the RESTCONF server:

   HTTP/1.1 200 OK
   Date: Mon, 23 Apr 2012 13:01:20 GMT
   Server: example-server
   Last-Modified: Mon, 23 Apr 2012 13:01:20 GMT
   Content-Type: application/yang-data+json

   {
     "ietf-restconf:yang-patch-status" : {
       "patch-id" : "move-song-patch",
       "ok" : [null]
     }
   }


*** Edit datastore resource example

The following example shows how 3 top-level data nodes from
different modules can be edited at the same time.

Example module "foo" defines leaf X.
Example module "bar" defines container Y, with child leafs A and B.
Example module "baz" defines list Z, with key C and child leafs D and E.

Request from the RESTCONF client:

   PATCH /restconf/data HTTP/1.1
   Host: example.com
   Accept: application/yang-data+json
   Content-Type: application/yang-patch+json

   {
     "ietf-yang-patch:yang-patch" : {
       "patch-id" : "datastore-patch-1",
       "comment" : "Edit 3 top-level data nodes at once",
       "edit" : [
         {
           "edit-id" : "edit1",
           "operation" : "create",
           "target" : "/foo:X",
           "value" : {
             "foo:X" : 42
           }
         },
         {
           "edit-id" : "edit2",
           "operation" : "merge",
           "target" : "/bar:Y",
           "value" : {
             "bar:Y" : {
               "A" : "test1",
               "B" : 99
             }
           }
         },
         {
           "edit-id" : "edit3",
           "operation" : "replace",
           "target" : "/baz:Z=2",
           "value" : {
             "baz:Z" : {
               "C" : 2,
               "D" : 100,
               "E" : false
             }
           }
         }
       ]
     }
   }

Response from the RESTCONF server:

   HTTP/1.1 200 OK
   Date: Mon, 23 Apr 2012 13:02:20 GMT
   Server: example-server
   Last-Modified: Mon, 23 Apr 2012 13:01:20 GMT
   Content-Type: application/yang-data+json

   {
     "ietf-yang-patch:yang-patch-status" : {
       "patch-id" : "datastore-patch-1",
       "ok" : [null]
     }
   }



{{document:
    name ;
    ipr trust200902;
    category std;
    references yangpatch-back.xml;
    title "YANG Patch Media Type";
    abbreviation "YANG Patch";
    contributor "author:Andy Bierman:YumaWorks:andy@yumaworks.com";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributor "author:Kent Watsen:Juniper Networks:kwatsen@juniper.net";
}}
